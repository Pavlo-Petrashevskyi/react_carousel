{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","calculateButtonSteps","button","props","images","frameSize","step","itemWidth","infinite","list","document","querySelector","leftPlaceToMove","length","style","getComputedStyle","matrix","WebKitCSSMatrix","transform","accurateMatrix","Math","ceil","m41","removeAttribute","setAttribute","this","animationDuration","carouselList","carouselContainer","map","image","img","Array","from","querySelectorAll","indexOf","height","width","transition","className","src","alt","type","onClick","PureComponent","App","state","method","htmlFor","id","name","defaultValue","min","onChange","e","setState","target","value","max","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5611406c.chunk.js","sourcesContent":["import { PureComponent } from 'react';\nimport './Carousel.scss';\n\ntype CarouselProps = {\n  images: string[];\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nclass Carousel extends PureComponent<CarouselProps, {}> {\n  componentDidUpdate() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      animationDuration,\n    } = this.props;\n\n    const carouselList = document\n      .querySelector('.Carousel__list') as HTMLElement;\n    const carouselContainer = document\n      .querySelector('.Carousel__list--container') as HTMLElement;\n\n    images.map(image => {\n      const img = Array.from(document\n        .querySelectorAll('img'))[images.indexOf(image)];\n\n      img.style.height = `${itemWidth}px`;\n      img.style.width = `${itemWidth}px`;\n\n      return null;\n    });\n\n    carouselList.style.transition = `all ${animationDuration}ms`;\n    carouselContainer.style.width = `${itemWidth * frameSize}px`;\n  }\n\n  calculateButtonSteps = (button: string) => {\n    const {\n      images,\n      frameSize,\n      step,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    const list: (HTMLElement | null) = document\n      .querySelector('.Carousel__list');\n\n    if (list != null) {\n      const maxPossibleWidth = images.length * itemWidth;\n      const leftPlaceToMove = (itemWidth * frameSize - maxPossibleWidth);\n\n      const style = getComputedStyle(list);\n      const matrix = new WebKitCSSMatrix(style.transform);\n      const accurateMatrix = Math\n        .ceil(matrix.m41 / itemWidth) * itemWidth;\n\n      if (button === 'prevButton') {\n        if (accurateMatrix >= leftPlaceToMove) {\n          document\n            .querySelector('.button--next')\n            ?.removeAttribute('disabled');\n\n          if (accurateMatrix >= (-itemWidth * step)) {\n            list.style.transform = 'translateX(0px)';\n\n            if (!infinite) {\n              document\n                .querySelector('.button--prev')\n                ?.setAttribute('disabled', 'true');\n            }\n\n            if (infinite && accurateMatrix === 0) {\n              list.style.transform = `translateX(${leftPlaceToMove}px)`;\n            }\n\n            return;\n          }\n\n          list.style.transform = `translateX(${accurateMatrix + (itemWidth * step)}px)`;\n        }\n      }\n\n      if (button === 'nextButton') {\n        if (leftPlaceToMove <= accurateMatrix) {\n          document\n            .querySelector('.button--prev')\n            ?.removeAttribute('disabled');\n\n          if (accurateMatrix <= (\n            leftPlaceToMove + (itemWidth * step))) {\n            list.style.transform = `translateX(${leftPlaceToMove}px)`;\n\n            if (!infinite) {\n              document\n                .querySelector('.button--next')\n                ?.setAttribute('disabled', 'true');\n            }\n\n            if (infinite && leftPlaceToMove === accurateMatrix) {\n              list.style.transform = 'translateX(0px)';\n            }\n\n            return;\n          }\n\n          list.style.transform = `translateX(${accurateMatrix - itemWidth * step}px)`;\n        }\n      }\n    }\n  };\n\n  render() {\n    const { images } = this.props;\n\n    return (\n      <div className=\"Carousel\">\n        <div className=\"Carousel__list--container\">\n          <ul className=\"Carousel__list\">\n            {images.map(image => {\n              return (\n                <li\n                  key={images.indexOf(image)}\n                >\n                  <img\n                    src={image}\n                    alt={`${images.indexOf(image)}`}\n                  />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"button button--prev\"\n          onClick={() => {\n            this.calculateButtonSteps('prevButton');\n          }}\n        >\n          Prev\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"button button--next\"\n          data-cy=\"next\"\n          onClick={() => {\n            this.calculateButtonSteps('nextButton');\n          }}\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1\n          data-cy=\"title\"\n          className=\"App__title\"\n        >\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <form\n          className=\"App__form\"\n          method=\"get\"\n        >\n          <label\n            htmlFor=\"itemWidth\"\n            className=\"App__form-label\"\n          >\n            Item width:\n\n            <input\n              type=\"number\"\n              id=\"itemWidth\"\n              name=\"itemWidth\"\n              className=\"App__form-item-input input\"\n              defaultValue=\"130\"\n              min=\"0\"\n              onChange={(e) => {\n                this.setState({ itemWidth: +e.target.value });\n              }}\n            />\n          </label>\n\n          <label\n            htmlFor=\"frameSize\"\n            className=\"App__form-label\"\n          >\n            Frame Size:\n\n            <input\n              type=\"number\"\n              id=\"frameSize\"\n              name=\"frameSize\"\n              className=\"App__form-frame-input input\"\n              defaultValue=\"3\"\n              min=\"1\"\n              max=\"10\"\n              onChange={(e) => {\n                this.setState({ frameSize: +e.target.value });\n              }}\n            />\n          </label>\n\n          <label\n            htmlFor=\"step\"\n            className=\"App__form-label\"\n          >\n            Step:\n\n            <input\n              type=\"number\"\n              id=\"step\"\n              name=\"step\"\n              className=\"App__form-step-input input\"\n              defaultValue=\"3\"\n              min=\"1\"\n              max=\"7\"\n              onChange={(e) => {\n                this.setState({ step: +e.target.value });\n              }}\n            />\n          </label>\n\n          <label\n            htmlFor=\"animationDuration\"\n            className=\"App__form-label\"\n          >\n            Animation duration:\n\n            <input\n              type=\"number\"\n              id=\"animationDuration\"\n              name=\"animationDuration\"\n              className=\"App__form-animation-input input\"\n              defaultValue=\"1000\"\n              onChange={(e) => {\n                this.setState({ animationDuration: +e.target.value });\n              }}\n            />\n          </label>\n\n          <label\n            htmlFor=\"infinite\"\n            className=\"App__form-label\"\n          >\n            infinite:\n\n            <input\n              type=\"checkbox\"\n              id=\"infinite\"\n              name=\"infinite\"\n              className=\"App__form-infinite-input input\"\n              defaultValue=\"false\"\n              onChange={() => {\n                return infinite\n                  ? this.setState({ infinite: false })\n                  : this.setState({ infinite: true });\n              }}\n            />\n          </label>\n        </form>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}